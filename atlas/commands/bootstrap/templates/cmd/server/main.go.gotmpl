package main

import (
	{{ if .WithGateway }}"context"{{ end }}
	"flag"
	"net"

	{{ if .WithGateway }}"github.com/golang/protobuf/proto"{{ end }}
	"github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/go-grpc-middleware/validator"
	"github.com/sirupsen/logrus"

	{{ if .WithGateway }}"github.com/infobloxopen/atlas-app-toolkit/gateway"{{ end }}
	"github.com/infobloxopen/atlas-app-toolkit/server"
)

var (
	ServerAddress  string
	{{ if .WithGateway -}}
	GatewayAddress string
	SwaggerDir     string
	{{ end -}}
	{{ if .WithDatabase }}DBConnectionString 	string{{ end }}
)

func main() {
	logger := logrus.New()
	grpcServer, err := NewGRPCServer(logger{{ if .WithDatabase }}, DBConnectionString{{ end }})
	if err != nil {
		logger.Fatalln(err)
	}

	s, err := server.NewServer(
		server.WithGrpcServer(grpcServer),
		{{ if .WithGateway -}}
		server.WithGateway(
			gateway.WithGatewayOptions(
				runtime.WithForwardResponseOption(forwardResponseOption),
			),
			gateway.WithServerAddress(ServerAddress),
			gateway.WithEndpointRegistration(cmd.GatewayURL, pb.Register{{ .Name | Service }}HandlerFromEndpoint),
		),
		server.WithHandler("/swagger/", NewSwaggerHandler(SwaggerDir)),
		{{- end }}
	)
	if err != nil {
		logger.Fatalln(err)
	}

	grpcL, err := net.Listen("tcp", ServerAddress)
	if err != nil {
		logger.Fatalln(err)
	}
	{{ if .WithGateway }}
	httpL, err := net.Listen("tcp", GatewayAddress)
	if err != nil {
		logger.Fatalln(err)
	}
	{{ end }}
	logger.Printf("serving gRPC at %s", ServerAddress)
	{{ if .WithGateway }}logger.Printf("serving http at %s", GatewayAddress){{ end }}

	if err := s.Serve(grpcL, {{ if .WithGateway }}httpL{{ else }}nil{{ end }}); err != nil {
		logger.Fatalln(err)
	}
}

func init() {
	// default server address; optionally set via command-line flags
	flag.StringVar(&ServerAddress, "address", cmd.ServerAddress, "the gRPC server address")
	{{ if .WithGateway -}}
	flag.StringVar(&GatewayAddress, "gateway", cmd.GatewayAddress, "address of the gateway server")
	flag.StringVar(&SwaggerDir, "swagger-dir", "pkg/pb/service.swagger.json", "directory of the swagger.json file")
	{{ end -}}
	{{ if .WithDatabase }}flag.StringVar(&DBConnectionString, "db", cmd.DBConnectionString, "the database address"){{ end }}
	flag.Parse()
}

{{ if .WithGateway -}}
func forwardResponseOption(ctx context.Context, w http.ResponseWriter, resp proto.Message) error {
	w.Header().Set("Cache-Control", "no-cache, no-store, max-age=0, must-revalidate")
	return nil
}
{{- end }}
